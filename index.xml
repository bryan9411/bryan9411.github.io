<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Bryan Blog</title>
    <link>https://bryan9411.github.io/</link>
    <description>Recent content on Bryan Blog</description>
    <image>
      <title>Bryan Blog</title>
      <url>https://bryan9411.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://bryan9411.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 31 Mar 2024 12:43:25 +0800</lastBuildDate><atom:link href="https://bryan9411.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 介紹</title>
      <link>https://bryan9411.github.io/posts/docker-01/</link>
      <pubDate>Sun, 31 Mar 2024 12:43:25 +0800</pubDate>
      
      <guid>https://bryan9411.github.io/posts/docker-01/</guid>
      <description>什麼是 Docker ? Docker 是一個開源的容器化平台，由 Dockerfile 、 Docker Image 、 Docker Container 三者組成 可將應用程式及其相關環境打包成一個獨立的容器(Container)，確保應用程式</description>
    </item>
    
    <item>
      <title>GraphQL 與 RESTful API 差異</title>
      <link>https://bryan9411.github.io/posts/graphql-01/</link>
      <pubDate>Mon, 20 Nov 2023 21:49:00 +0800</pubDate>
      
      <guid>https://bryan9411.github.io/posts/graphql-01/</guid>
      <description>再介紹 GraphQL 之前要先介紹一下過去我們常用串 api 的方式 RESTful API。 RESTful API RESTful API 它是一種架構風格，使用標準的 HTTP 方法 ，例如：GET、POST、PUT、DELE</description>
    </item>
    
    <item>
      <title>Git: Fetch vs Pull </title>
      <link>https://bryan9411.github.io/posts/git-03/</link>
      <pubDate>Sun, 12 Nov 2023 17:24:15 +0800</pubDate>
      
      <guid>https://bryan9411.github.io/posts/git-03/</guid>
      <description>fetch vs pull 指令 說明 fetch 從遠端下載最新的資料，但不合併到本地分支。 pull 從遠端下載最新的資料並合併到本地分支，其實就是執行 git fetch 和 git merge 兩個指令的組合。</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://bryan9411.github.io/archives/archives/</link>
      <pubDate>Wed, 08 Nov 2023 22:39:12 +0800</pubDate>
      
      <guid>https://bryan9411.github.io/archives/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git: 修改提交與重置</title>
      <link>https://bryan9411.github.io/posts/git-02/</link>
      <pubDate>Wed, 08 Nov 2023 21:17:32 +0800</pubDate>
      
      <guid>https://bryan9411.github.io/posts/git-02/</guid>
      <description>再 Git: 基本指令 介紹到一些基本 git 指令，但還有更多實用的指令 👇 修改提交(amend) git commit --amend 如果這次修改只是增加註解或者刪除多餘 log 之類的，並沒有其他</description>
    </item>
    
    <item>
      <title>Git: 基本指令</title>
      <link>https://bryan9411.github.io/posts/git-01/</link>
      <pubDate>Tue, 07 Nov 2023 21:48:41 +0800</pubDate>
      
      <guid>https://bryan9411.github.io/posts/git-01/</guid>
      <description>Git 它是一個版本控制系統，可以幫助你追蹤程式碼變化、管理版本、合作開發，是團隊協作中不可或缺的工具之一。 以下是一些基本的 git 指令與使用情境 👇 init 當</description>
    </item>
    
  </channel>
</rss>
